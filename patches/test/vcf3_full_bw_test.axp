<patch-1.0 appVersion="1.0.9">
   <patchobj type="filter/vcf3_full_bw" uuid="92455c652cd098cbb682a5497baa18ab123abef8" name="object_1" x="294" y="84">
      <params>
         <frac32.u.map name="pitch" value="62.23499999999999"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="92455c652cd098cbb682a5497baa18ab123abef8">
         <sDescription>2-pole resonant low-pass filter (biquad), filter updated at k-rate</sDescription>
         <author>Johannes Taelman, hacked by AL</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32 name="pitch" description="pitch"/>
            <frac32 name="reso" description="filter resonance"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
            <frac32 name="freq" description="freq parameter"/>
            <frac32 name="W0a" description="biquad half bw freq"/>
            <frac32 name="W0b" description="biquad full bw freq"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.freq name="pitch"/>
            <frac32.u.map.filterq name="reso"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[data_filter_biquad_A fd;

        int32_t filter_W0a;
        int32_t filter_W0b;

        void f_filter_biquad_A(data_filter_biquad_A *v, const int32_t *sourcebuf,
                               int32_t *destbuf, uint32_t filter_W0, uint32_t q_inv)
        {
        // reference http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt
        // LPF
          filter_W0a = filter_W0;
          filter_W0b = filter_W0;

          if (filter_W0a > (INT32_MAX / 4))
            filter_W0a = INT32_MAX / 4;

          if (filter_W0b > (INT32_MAX / 2))
            filter_W0b = INT32_MAX / 2;

          filter_W0 = filter_W0b;

        //    filter_W0 = filter_W0<<2;
          /*
           int32_t sinW0 = arm_sin_q31(filter_W0);
           int32_t cosW0 = arm_cos_q31(filter_W0);
           int32_t sinW0 = fsini(filter_W0);
           int32_t cosW0 = fsini(filter_W0+(INT32_MAX>>2));
           */

          int32_t sinW0; // = arm_sin_q31(filter_W0);
          int32_t cosW0; // = arm_cos_q31(filter_W0);
          int a = filter_W0;
          int b = filter_W0 + (1 << 30);

          SINE2TINTERP(a, sinW0)
          SINE2TINTERP(b, cosW0)

          int32_t alpha = ___SMMUL(sinW0, q_inv);
        //    int32_t alpha = sinW0>>8;
          int32_t filter_x_n1 = v->filter_x_n1;
          int32_t filter_x_n2 = v->filter_x_n2;
          int32_t filter_y_n1 = v->filter_y_n1;
          int32_t filter_y_n2 = v->filter_y_n2;
          float filter_a0 = (HALFQ31 + alpha);
          float filter_a0_inv = ((INT32_MAX >> 2) / filter_a0);
          int32_t a0_inv_q31 = (int32_t)(INT32_MAX * filter_a0_inv);
          int32_t filter_a1 = ___SMMUL(-(-cosW0), a0_inv_q31); // negated
          int32_t filter_a2 = ___SMMUL(-(HALFQ31 - alpha), a0_inv_q31); // negated
          int32_t filter_b0 = ___SMMUL(HALFQ31 - (cosW0 >> 1), a0_inv_q31);
          int32_t filter_b1 = (filter_b0 >> 1);
          int i;
          for (i = 0; i < BUFSIZE; i++) {
            int32_t filterinput = *(sourcebuf++);
            int32_t accu = ___SMMUL(filter_b0, filterinput);
            accu = ___SMMLA(filter_b0, filter_x_n2, accu);
            accu = ___SMMLA(filter_b1, filter_x_n1, accu);
            accu = ___SMMLA(filter_a1, filter_y_n1, accu);
            accu = ___SMMLA(filter_a2, filter_y_n2, accu);
            int32_t filteroutput;
            filteroutput = __SSAT(accu, 28) << 4;
            filter_x_n2 = filter_x_n1;
            filter_x_n1 = filterinput;
            filter_y_n2 = filter_y_n1;
            filter_y_n1 = filteroutput;
            *(destbuf++) = filteroutput;
          }
          v->filter_x_n1 = filter_x_n1;
          v->filter_x_n2 = filter_x_n2;
          v->filter_y_n1 = filter_y_n1;
          v->filter_y_n2 = filter_y_n2;
        }

]]></code.declaration>
         <code.init><![CDATA[  init_filter_biquad_A(&fd);
]]></code.init>
         <code.krate><![CDATA[  {
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);

      f_filter_biquad_A(&fd,inlet_in,outlet_out,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));


      outlet_freq = freq ;
      outlet_W0a  = filter_W0a;
      outlet_W0b  = filter_W0b;
   }
]]></code.krate>
      </object>
   </patchobj>
   <obj type="spectral/rfft 128" uuid="27b4fa628dda621136f74e407ee8761ba76f631c" name="rfft_3" x="504" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_1" x="658" y="84">
      <params>
         <frac32.u.map name="amp" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="784" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_3" x="406" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="406" y="154">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_2" x="658" y="168">
      <params>
         <frac32.u.map name="amp" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_2" x="406" y="210">
      <params/>
      <attribs/>
   </obj>
   <obj type="noise/uniform" uuid="a3926ef22ae9ac217cd09933d90101848796eb78" name="uniform_1" x="140" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="filter/vcf3" uuid="92455c652cd098cbb682a5497baa18abbf2ef865" name="vcf3_1" x="294" y="308">
      <params>
         <frac32.s.map name="pitch" value="64.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="spectral/rfft 128" uuid="27b4fa628dda621136f74e407ee8761ba76f631c" name="rfft_2" x="504" y="308">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="object_1" outlet="out"/>
         <dest obj="rfft_3" inlet="in"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="uniform_1" outlet="wave"/>
         <dest obj="vcf3_1" inlet="in"/>
         <dest obj="object_1" inlet="in"/>
      </net>
      <net>
         <source obj="vcf3_1" outlet="out"/>
         <dest obj="rfft_2" inlet="in"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="object_1" outlet="freq"/>
         <dest obj="hex_3" inlet="in"/>
      </net>
      <net>
         <source obj="object_1" outlet="W0a"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="object_1" outlet="W0b"/>
         <dest obj="hex_2" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>608</x>
      <y>124</y>
      <width>944</width>
      <height>734</height>
   </windowPos>
</patch-1.0>