<objdefs appVersion="1.0.11">
  <obj.normal id="fm4op" uuid="acfe725565982910bwca2a267f7751d3ee7120b2">
    <sDescription>FM voice, 4 operators</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <includes>
      <include>./fm4op.h</include>
    </includes>
    <inlets>
      <frac32.bipolar       name="pitch" description="Pitch input"/>
      <frac32.positive      name="op1a"  description="Operator 1 amplitude"/>
      <frac32.positive      name="op2a"  description="Operator 2 amplitude"/>
      <frac32.positive      name="op3a"  description="Operator 3 amplitude"/>
      <frac32.positive      name="op4a"  description="Operator 4 amplitude"/>
    </inlets>
    <outlets>
      <frac32buffer.bipolar name="out"  description="Output"/>
    </outlets>
    <params>
      <frac32.s.map.pitch name="pitch" noLabel="false" description="Pitch bias"/>
      <frac32.s.map.pitch name="op1r"  noLabel="false" description="Operator 1 ratio"/>
      <frac32.s.map.pitch name="op2r"  noLabel="false" description="Operator 2 ratio"/>
      <frac32.s.map.pitch name="op3r"  noLabel="false" description="Operator 3 ratio"/>
      <frac32.s.map.pitch name="op4r"  noLabel="false" description="Operator 4 ratio"/>
      <frac32.u.map.gain  name="op1i"  noLabel="false" description="Operator 1 index"/>
      <frac32.u.map.gain  name="op2i"  noLabel="false" description="Operator 2 index"/>
      <frac32.u.map.gain  name="op3i"  noLabel="false" description="Operator 3 index"/>
      <frac32.u.map.gain  name="op4i"  noLabel="false" description="Operator 4 index"/>
      <int32 name="algorithm" noLabel="false">
         <MinValue i="1"/>
         <MaxValue i="8"/>
      </int32>
    </params>
    <attribs>
      <combo name="volscaling">
        <MenuEntries>
          <string>Type A</string>
          <string>Type B</string>
          <string>Off</string>
        </MenuEntries>
        <CEntries>
          <string>1</string>
          <string>2</string>
          <string>0</string>
        </CEntries>
      </combo>
      <combo name="optimize">
        <MenuEntries>
          <string>Space</string>
          <string>Speed</string>
        </MenuEntries>
        <CEntries>
          <string>0</string>
          <string>1</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      #define DEBUGF LogTextMessage
      //#define DEBUGF(...) {}

      // Performance as of 18.12.2016 01:48
      // Worst case, algorithn 2,3,4
      // Optimized for space
      //    volume scalig on  :   7.0%
      //    volume scalig off :   5.8%
      // Optimized for speed:
      //    volume scalig on  :   6.7%
      //    volume scalig off :   5.5%

      #if attr_optimize == 0
        // ..no unrolling...
      #elif attr_optimize == 1
        #define UNROLL_OPERATORS
      #elif attr_optimize == 2
        #define UNROLL_PITCH
        #define UNROLL_MODULATORS
        #define UNROLL_OPERATORS
      #endif

      #if attr_volscaling==1
        #define USE_VOL_SCALING_A
      #elif attr_volscaling==2
        #define USE_VOL_SCALING_B
      #endif

      int32_t  outputs[FM4OP_N_OPERATORS];
      int32_t  outputs_tmp[FM4OP_N_OPERATORS];
      uint32_t phase[FM4OP_N_OPERATORS];
      uint32_t index[FM4OP_N_OPERATORS];
      uint32_t amp[FM4OP_N_OPERATORS];
      int32_t  freq[FM4OP_N_OPERATORS];
#ifndef UNROLL_PITCH
      int32_t  ratio[FM4OP_N_OPERATORS];
#endif

    ]]></code.declaration>
    <code.init><![CDATA[

      #ifdef UNROLL_PITCH
        DEBUGF("UNROLL_PITCH");
      #endif
      #ifdef UNROLL_OPERATORS
        DEBUGF("UNROLL_OPERATORS");
      #endif
      #ifdef UNROLL_MODULATORS
        DEBUGF("UNROLL_MODULATORS");
      #endif
      #ifdef USE_VOL_SCALING_A
        DEBUGF("USE_VOL_SCALING_A");
      #endif
      #ifdef USE_VOL_SCALING_B
        DEBUGF("USE_VOL_SCALING_B");
      #endif

      for( int op = 0; op < FM4OP_N_OPERATORS; op++ )
        {
          phase[op] = 0;
        }

    ]]></code.init>
    <code.krate><![CDATA[

      int32_t alg   = param_algorithm-1;
      int32_t pitch = param_pitch + inlet_pitch;

      index[0] = param_op1i;
      index[1] = param_op2i;
      index[2] = param_op3i;
      index[3] = param_op4i;

      amp[0]   = inlet_op1a<<1;
      amp[1]   = inlet_op2a<<1;
      amp[2]   = inlet_op3a<<1;
      amp[3]   = inlet_op4a<<1;

#ifndef UNROLL_PITCH
      ratio[0] = param_op1r;
      ratio[1] = param_op2r;
      ratio[2] = param_op3r;
      ratio[3] = param_op4r;
      for( int op = 0; op < FM4OP_N_OPERATORS; op++ )
        {
          MTOFEXTENDED( pitch + ratio[op], freq[op] );
        }
#else
      // Unroll pitch gains less than 0.1% DSP at the expense of 80 bytes, so not much use.
      MTOFEXTENDED( pitch + param_op1r, freq[0] );
      MTOFEXTENDED( pitch + param_op2r, freq[1] );
      MTOFEXTENDED( pitch + param_op3r, freq[2] );
      MTOFEXTENDED( pitch + param_op4r, freq[3] );
#endif

    ]]></code.krate>
    <code.srate><![CDATA[

      int32_t operator_index;
      int32_t mod;
      int32_t out;

#ifdef UNROLL_MODULATORS
  #define OPERATOR_FM( op ) \
      /* Saves setting up the loop, but not measureably faster in practice... */ \
      mod = 0; \
      operator_index = fm4op_algorithms[alg].mod[op][0]; \
      if( operator_index >= 0 ) \
        { \
          mod += outputs[ operator_index ]; \
          operator_index = fm4op_algorithms[alg].mod[op][1]; \
          if( operator_index >= 0 ) \
            { \
              mod += outputs[ operator_index ]; \
            } \
        } \
      mod = ___SMMUL( index[op], mod ); \
      phase[op] += freq[op]; \
      SINE2TINTERP( phase[op] + (mod<<6), out ) \
      outputs_tmp[op] = ___SMMUL( amp[op], out );
#else
  #define OPERATOR_FM( op ) \
      mod = 0; \
      for( int input = 0; input < FM4OP_N_MODULATORS; input++ ) \
        { \
          operator_index = fm4op_algorithms[alg].mod[op][input]; \
          if( operator_index < 0 ) \
            { \
              break; \
            } \
          mod += outputs[ operator_index ]; \
        } \
      mod = ___SMMUL( index[op], mod ); \
      phase[op] += freq[op]; \
      SINE2TINTERP( phase[op] + (mod<<6), out ) /* (mod<<6) is the largest index that doesn't go bad */ \
      outputs_tmp[op] = ___SMMUL( amp[op], out );
#endif

#ifndef UNROLL_OPERATORS
      for( int op = 0; op < FM4OP_N_OPERATORS; op++ )
        {
          OPERATOR_FM( op );
        }
#else
      OPERATOR_FM( 0 );
      OPERATOR_FM( 1 );
      OPERATOR_FM( 2 );
      OPERATOR_FM( 3 );
#endif

#if defined(USE_VOL_SCALING_A) | defined(USE_VOL_SCALING_B)
  #define IFDEF_USE_VOL_SCALING(X) X
#else
  #define IFDEF_USE_VOL_SCALING(X)
#endif

#define OPERATOR_MIX( op ) \
      outputs[op] = outputs_tmp[op]; \
      operator_index = fm4op_algorithms[alg].out[op]; \
      if( operator_index >= 0 ) \
        { \
          out += outputs[ operator_index ]; \
          IFDEF_USE_VOL_SCALING(n_operators++;) \
        }

#if defined(USE_VOL_SCALING_A) | defined(USE_VOL_SCALING_B)
      int32_t n_operators = 0;
#endif
      out = 0;
#ifndef UNROLL_OPERATORS
      for( int op = 0; op < FM4OP_N_OPERATORS; op++ )
        {
          OPERATOR_MIX( op );
        }
#else
      OPERATOR_MIX( 0 );
      OPERATOR_MIX( 1 );
      OPERATOR_MIX( 2 );
      OPERATOR_MIX( 3 );
#endif
#if defined(USE_VOL_SCALING_A)
      outlet_out = ___SMMUL( fm4op_volscaling_A[ n_operators ], out<<1 );
#elif defined(USE_VOL_SCALING_B)
      outlet_out = ___SMMUL( fm4op_volscaling_B[ n_operators ], out<<1 );
#else
      outlet_out = out;
#endif

    ]]></code.srate>
  </obj.normal>
</objdefs>
