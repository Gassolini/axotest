<objdefs appVersion="1.0.9">
  <obj.normal id="midi_clk_rx" uuid="83a7e9eb627413a35b43f97114c130af4b3a4793">
    <sDescription>MIDI clock receiver</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
    </inlets>
    <outlets>
      <bool32.pulse name="24ppq"     description="Pulse on 24 PPQ clock"/>
      <bool32.pulse name="start"     description="Pulse on start"/>
      <bool32.pulse name="stop"      description="Pulse on stop"/>
      <bool32.pulse name="continue"  description="Pulse on continue"/>
      <!--bool32.pulse name="reset"     description="Pulse on reset"/-->
      <bool32.pulse name="songsel"   description="Pulse on song selection"/>
      <int32        name="selected"  description="Song selection"/>
      <bool32.pulse name="songpos"   description="Pulse on song position"/>
      <int32        name="position"  description="Song position"/>
    </outlets>
    <displays/>
    <params>
    </params>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>omni</string>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_OMNI, 0</string>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      //#define DEBUGF LogTextMessage
      #define DEBUGF(...) {}

      uint32_t  pulse_24ppq;
      uint32_t  pulse_start;
      uint32_t  pulse_stop;
      uint32_t  pulse_continue;
      //uint32_t  pulse_reset;
      uint32_t  pulse_songsel;
      uint32_t  song_selected;
      uint32_t  pulse_songpos;
      uint32_t  song_position;

      __attribute__ (( always_inline )) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }

    ]]></code.declaration>
    <code.init><![CDATA[

      pulse_24ppq     = 0;
      pulse_start     = 0;
      pulse_stop      = 0;
      pulse_continue  = 0;
      //pulse_reset     = 0;
      pulse_songsel   = 0;
      song_selected   = 0;
      pulse_songpos   = 0;
      song_position   = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      outlet_24ppq    = pulse_24ppq;
      outlet_start    = pulse_start;
      outlet_stop     = pulse_stop;
      outlet_continue = pulse_continue;
      //outlet_reset    = pulse_reset;
      outlet_songpos  = pulse_songpos;
      outlet_selected = song_selected;
      outlet_songsel  = pulse_songsel;
      outlet_position = song_position;
      pulse_24ppq     = 0;
      pulse_start     = 0;
      pulse_stop      = 0;
      pulse_continue  = 0;
      //pulse_reset     = 0;
      pulse_songsel   = 0;
      pulse_songpos   = 0;

    ]]></code.krate>
    <code.midihandler><![CDATA[

      if( midi_device_test( dev, port, attr_device ) == 1 )
        {
          if( status == MIDI_TIMING_CLOCK )
            {
              pulse_24ppq = 1;
            }
          else if( status == MIDI_START )
            {
              pulse_start = 1;
            }
          else if( status == MIDI_STOP )
            {
              pulse_stop = 1;
            }
          else if( status == MIDI_CONTINUE )
            {
              pulse_continue = 1;
            }
          else if( status == MIDI_SONG_POSITION )
            {
              song_position  = 6 * ( (data2<<7) + data1 );
              pulse_songpos = 1;
            }
          else if( status == MIDI_SONG_SELECT )
            {
              song_selected = data1;
              pulse_songsel = 1;
            }
          //else if( status == MIDI_RESET )
          //  {
          //    pulse_reset = 1;
          //  }
        }

    ]]></code.midihandler>
  </obj.normal>
</objdefs>