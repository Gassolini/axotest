<objdefs appVersion="1.0.9">
  <obj.normal id="midi_clk_tx" uuid="92a7e9ec6bae23a35b1204aa14c130af4b3a4793">
    <sDescription>MIDI clock transmitter</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <bool32.rising name="24ppq"    description="Send 24 PPQ clock"/>
      <bool32.rising name="start"    description="Send start"/>
      <bool32.rising name="stop"     description="Send stop"/>
      <bool32.rising name="continue" description="Send continue"/>
      <!--bool32.rising name="reset"    description="Send reset"/-->
      <bool32.rising name="songsel"  description="Send song select"/>
      <int32         name="selected" description="Song selection"/>
      <bool32.rising name="songpos"  description="Send song position"/>
      <int32         name="position" description="Song position"/>
    </inlets>
    <outlets>
    </outlets>
    <displays/>
    <params>
    </params>
    <attribs>
      <combo name="device">
        <MenuEntries>
          <string>din</string>
          <string>usb host port 1</string>
          <string>usb host port 2</string>
          <string>usb host port 3</string>
          <string>usb host port 4</string>
          <string>internal port 1</string>
          <string>internal port 2</string>
          <string>usb device port 1</string>
        </MenuEntries>
        <CEntries>
          <string>MIDI_DEVICE_DIN, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 1</string>
          <string>MIDI_DEVICE_USB_HOST, 2</string>
          <string>MIDI_DEVICE_USB_HOST, 3</string>
          <string>MIDI_DEVICE_USB_HOST, 4</string>
          <string>MIDI_DEVICE_INTERNAL, 1</string>
          <string>MIDI_DEVICE_INTERNAL, 2</string>
          <string>MIDI_DEVICE_USB_DEVICE, 1</string>
        </CEntries>
      </combo>
    </attribs>
    <code.declaration><![CDATA[

      //#define DEBUGF LogTextMessage
      #define DEBUGF(...) {}

      uint32_t old_24ppq;
      uint32_t old_start;
      uint32_t old_stop;
      uint32_t old_continue;
      //uint32_t old_reset;
      uint32_t old_songsel;
      uint32_t old_songpos;

    ]]></code.declaration>
    <code.init><![CDATA[

      old_24ppq      = 0;
      old_start      = 0;
      old_stop       = 0;
      old_continue   = 0;
      //old_reset      = 0;
      old_songsel    = 0;
      old_songpos    = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      if( inlet_24ppq && !old_24ppq )
        {
          MidiSend1( (midi_device_t) attr_device, MIDI_TIMING_CLOCK ) ;
        }

      if( inlet_start && !old_start )
        {
          MidiSend1( (midi_device_t) attr_device, MIDI_START );
        }

      if( inlet_stop  && !old_stop    )
        {
          MidiSend1( (midi_device_t) attr_device, MIDI_STOP );
        }

      if( inlet_continue && !old_continue    )
        {
          MidiSend1( (midi_device_t) attr_device, MIDI_CONTINUE );
        }

      //if( inlet_reset && !old_reset    )
      //  {
      //    MidiSend1( (midi_device_t) attr_device, MIDI_RESET );
      //  }

      if( inlet_songsel && !old_songsel )
        {
          MidiSend2( (midi_device_t) attr_device, MIDI_SONG_SELECT, (uint8_t) inlet_selected );
        }

      if( inlet_songpos && !old_songpos )
        {
          MidiSend3( (midi_device_t) attr_device, MIDI_SONG_POSITION, (uint8_t) inlet_position & 0x7F, (uint8_t) (inlet_position<<7) & 0x7F );
        }

      old_24ppq    = inlet_24ppq;
      old_start    = inlet_start;
      old_stop     = inlet_stop;
      old_continue = inlet_continue;
      //old_reset    = inlet_reset;
      old_songsel  = inlet_songsel;
      old_songpos  = inlet_songpos;

    ]]></code.krate>
    <code.midihandler><![CDATA[
    ]]></code.midihandler>
  </obj.normal>
</objdefs>