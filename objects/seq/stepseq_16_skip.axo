<objdefs appVersion="1.0.9">
  <obj.normal id="stepseq_4_skip" uuid="1213fd35e930c14bff9cae8548ea71ffaa2947ac">
    <sDescription>Step sequencer, skip x 4</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32  name="step"  description="Step select input"/>
    </inlets>
    <outlets>
      <int32  name="chain" description="Chain step output"/>
      <int32  name="step"  description="Step output, with skipped steps"/>
      <int32  name="dir"   description="Step direction, +1 or -1"/>
    </outlets>
    <displays/>
    <params>
      <bool32.tgl name="s1"/>
      <bool32.tgl name="s2"/>
      <bool32.tgl name="s3"/>
      <bool32.tgl name="s4"/>
    </params>
    <attribs/>
    <code.declaration><![CDATA[

      int32_t direction;
      int32_t skip_steps;
      int32_t current_step;
      int32_t old_step;

    ]]></code.declaration>
    <code.init><![CDATA[

      direction    = 1;
      skip_steps   = 0;
      current_step = 0;
      old_step     = 0;

    ]]></code.init>
    <code.krate><![CDATA[

      switch( inlet_step )
        {
          case 0:  if( param_s1 ) skip_steps++;  break;
          case 1:  if( param_s2 ) skip_steps++;  break;
          case 2:  if( param_s3 ) skip_steps++;  break;
          case 3:  if( param_s4 ) skip_steps++;  break;
        }

      int32_t  current_step;

      if( direction == 1 )
        {
          step = inlet_step + skip_steps;
          if( step > 3 )


          if( inlet_step < old_step )
            {
              skip_steps = 0;
              if( inlet_step == old_step - 1 )
                {
                  direction = -1;
                }
            }
        }
      else //if( direction == 1 )
        {
          if( inlet_step > old_step )
            skip_steps = 0;
            {
              skip_steps = 0;
              if( inlet_step == old_step + 1 )
                {
                  direction = 1;
                }
            }
          outlet_step = inlet_step - skip_steps;
        }


      //outlet_step = inlet_step - skip_steps;  // Hmm how about reverse
      if( outlet_step ) < 0
        outlet_step = 0;
      else if( outlet_step ) > 3
        outlet_step = 3;

      outlet_chain = inlet_step - 4;
      outlet_dir   = direction;
      old_step     = inlet_step;

    ]]></code.krate>
  </obj.normal>
  <obj.normal id="stepseq_8_switch" uuid="30c14bae8548ea13fd3539ff97112cff972947ac">
    <sDescription>Step sequencer, switch x 8</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32  name="step"  description="Step select input"/>
      <frac32 name="sig1"  description="Signal 1 input"/>
      <frac32 name="sig2"  description="Signal 2 input"/>
      <frac32 name="sig3"  description="Signal 3 input"/>
      <bool32 name="gate1" description="Gate 1 input"/>
    </inlets>
    <outlets>
      <int32  name="chain" description="Chain step output"/>
      <bool32 name="out"   description="Switch output"/>
      <frac32 name="sig1"  description="Signal 1 output"/>
      <frac32 name="sig2"  description="Signal 2 output"/>
      <frac32 name="sig3"  description="Signal 3 output"/>
      <bool32 name="gate1" description="Gate 1 output"/>
    </outlets>
    <displays/>
    <params>
      <bool32.tgl name="s1"/>
      <bool32.tgl name="s2"/>
      <bool32.tgl name="s3"/>
      <bool32.tgl name="s4"/>
      <bool32.tgl name="s5"/>
      <bool32.tgl name="s6"/>
      <bool32.tgl name="s7"/>
      <bool32.tgl name="s8"/>
    </params>
    <attribs/>
    <code.krate><![CDATA[
      switch( inlet_step )
        {
          case 0:  outlet_out = param_s1;  break;
          case 1:  outlet_out = param_s2;  break;
          case 2:  outlet_out = param_s3;  break;
          case 3:  outlet_out = param_s4;  break;
          case 4:  outlet_out = param_s5;  break;
          case 5:  outlet_out = param_s6;  break;
          case 6:  outlet_out = param_s7;  break;
          case 7:  outlet_out = param_s8;  break;
          default: outlet_out = 0;         break;

        }
      if( outlet_out )
        {
          outlet_sig1  = inlet_sig1;
          outlet_sig2  = inlet_sig2;
          outlet_sig3  = inlet_sig3;
          outlet_gate1 = inlet_gate1;
        }
      else
        {
          outlet_sig1  = 0;
          outlet_sig2  = 0;
          outlet_sig3  = 0;
          outlet_gate1 = 0;
        }
      outlet_chain = inlet_step - 8;
    ]]></code.krate>
  </obj.normal>
  <obj.normal id="stepseq_16_switch" uuid="1e213fd35128548ea76930c14bff9cff972947ac">
    <sDescription>Step sequencer, switch x 16</sDescription>
    <author>Are Leistad</author>
    <license>BSD</license>
    <inlets>
      <int32  name="step"  description="Step select input"/>
      <frac32 name="sig1"  description="Signal 1 input"/>
      <frac32 name="sig2"  description="Signal 2 input"/>
      <frac32 name="sig3"  description="Signal 3 input"/>
      <bool32 name="gate1" description="Gate 1 input"/>
    </inlets>
    <outlets>
      <int32  name="chain" description="Chain step output"/>
      <bool32 name="out"   description="Switch output"/>
      <frac32 name="sig1"  description="Signal 1 output"/>
      <frac32 name="sig2"  description="Signal 2 output"/>
      <frac32 name="sig3"  description="Signal 3 output"/>
      <bool32 name="gate1" description="Gate 1 output"/>
    </outlets>
    <displays/>
    <params>
      <bool32.tgl name="s1"/>
      <bool32.tgl name="s2"/>
      <bool32.tgl name="s3"/>
      <bool32.tgl name="s4"/>
      <bool32.tgl name="s5"/>
      <bool32.tgl name="s6"/>
      <bool32.tgl name="s7"/>
      <bool32.tgl name="s8"/>
      <bool32.tgl name="s9"/>
      <bool32.tgl name="s10"/>
      <bool32.tgl name="s11"/>
      <bool32.tgl name="s12"/>
      <bool32.tgl name="s13"/>
      <bool32.tgl name="s14"/>
      <bool32.tgl name="s15"/>
      <bool32.tgl name="s16"/>
    </params>
    <attribs/>
    <code.krate><![CDATA[
      switch( inlet_step )
        {
          case 0:  outlet_out = param_s1;  break;
          case 1:  outlet_out = param_s2;  break;
          case 2:  outlet_out = param_s3;  break;
          case 3:  outlet_out = param_s4;  break;
          case 4:  outlet_out = param_s5;  break;
          case 5:  outlet_out = param_s6;  break;
          case 6:  outlet_out = param_s7;  break;
          case 7:  outlet_out = param_s8;  break;
          case 8:  outlet_out = param_s9;  break;
          case 9:  outlet_out = param_s10; break;
          case 10: outlet_out = param_s11; break;
          case 11: outlet_out = param_s12; break;
          case 12: outlet_out = param_s13; break;
          case 13: outlet_out = param_s14; break;
          case 14: outlet_out = param_s15; break;
          case 15: outlet_out = param_s16; break;
          default: outlet_out = 0;         break;

        }
      if( outlet_out )
        {
          outlet_sig1  = inlet_sig1;
          outlet_sig2  = inlet_sig2;
          outlet_sig3  = inlet_sig3;
          outlet_gate1 = inlet_gate1;
        }
      else
        {
          outlet_sig1  = 0;
          outlet_sig2  = 0;
          outlet_sig3  = 0;
          outlet_gate1 = 0;
        }
      outlet_chain = inlet_step - 16;
    ]]></code.krate>
  </obj.normal>
</objdefs>